#version 450
//#extension GL_ARB_seperate_shader_objects : enable

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

struct InfoBuffer
{
    uint uWidth;
    uint uHeight;
};

struct FHydFloatCombiner
{
    float values[8];
};

layout(std140, binding = 0) buffer hbuf
{
    float heightMap[];
};

// layout(std140, binding = 1) buffer buf
// {
//     float outMap[];
// }

layout(std140, binding = 1) buffer wbuf
{
    FHydFloatCombiner waterMap[];
};

layout(std140, binding = 2) buffer sbuf
{
    FHydFloatCombiner sedimentMap[];
};

layout(std140, binding = 3) buffer waterlv
{
   float waterLevel[];
};

layout(std140, binding = 4) buffer sedlv
{
   float sedimentLevel[];
};

layout(std140, binding = 5) buffer delaywaterlv
{
   float delayedWaterLevel[];
};

layout(std140, binding = 6) buffer delaysedlv
{
   float delayedSedimentLevel[];
};

layout(std140, binding = 7) buffer info
{
   InfoBuffer shaderInfo;
};


/**
 * Second Pass
 */
void main()
{
    if(gl_GlobalInvocationID.x >= shaderInfo.uWidth || gl_GlobalInvocationID.y >= shaderInfo.uHeight)
    {
        return;
    }

    uint gIdx = gl_GlobalInvocationID.y * shaderInfo.uWidth + gl_GlobalInvocationID.x;

    // 
}
